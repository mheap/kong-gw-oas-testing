components:
  parameters:
    ACLId:
      description: ID of the ACL to lookup
      example: f28acbfa-c866-4587-b688-0208ac24df21
      in: path
      name: ACLId
      required: true
      schema:
        type: string
    APIKeyId:
      description: ID of the API-key to lookup
      example: ""
      in: path
      name: APIKeyId
      required: true
      schema:
        type: string
    BasicAuthId:
      description: ID of the Basic-auth credential to lookup
      example: 80db1b58-ca7c-4d21-b92a-64eb07725872
      in: path
      name: BasicAuthId
      required: true
      schema:
        type: string
    CACertificateId:
      description: ID of the CA Certificate to lookup
      example: 3c31f18a-f27a-4f9b-8cd4-bf841554612f
      in: path
      name: CACertificateId
      required: true
      schema:
        type: string
    CertificateId:
      description: ID of the Certificate to lookup
      example: ddf3cdaa-3329-4961-822a-ce6dbd38eff7
      in: path
      name: CertificateId
      required: true
      schema:
        type: string
    ConsumerGroupId:
      description: ID of the Consumer Group to lookup
      example: ""
      in: path
      name: ConsumerGroupId
      required: true
      schema:
        type: string
    ConsumerId:
      description: ID of the Consumer to lookup
      example: c1059869-6fa7-4329-a5f5-5946d14ca2c5
      in: path
      name: ConsumerId
      required: true
      schema:
        type: string
    ControlPlaneId:
      description: The UUID of your control plane. This variable is available in the Konnect manager.
      example: 9524ec7d-36d9-465d-a8c5-83a3c9390458
      in: path
      name: controlPlaneId
      required: true
      schema:
        format: uuid
        type: string
    HMACAuthId:
      description: ID of the HMAC-auth credential to lookup
      example: 70e7b00b-72f2-471b-a5ce-9c4171775360
      in: path
      name: HMACAuthId
      required: true
      schema:
        type: string
    JWTId:
      description: ID of the JWT to lookup
      example: 4a7f5faa-8c96-46d6-8214-c87573ef2ac4
      in: path
      name: JWTId
      required: true
      schema:
        type: string
    KeyId:
      description: ID of the Key to lookup
      example: bba22c06-a632-42be-a018-1b9ff357b5b9
      in: path
      name: KeyId
      required: true
      schema:
        type: string
    KeySetId:
      description: ID of the KeySet to lookup
      example: 6cc34248-50b4-4a81-9201-3bdf7a83f712
      in: path
      name: KeySetId
      required: true
      schema:
        type: string
    PaginationOffset:
      description: Offset from which to return the next set of resources. Use the value of the 'offset' field from the response of a list operation as input here to paginate through all the resources
      in: query
      name: offset
      schema:
        type: string
    PaginationSize:
      description: Number of resources to be returned.
      in: query
      name: size
      schema:
        default: 100
        maximum: 1000
        minimum: 1
        type: integer
    PaginationTagsFilter:
      description: A list of tags to filter the list of resources on. Multiple tags can be concatenated using ',' to mean AND or using '/' to mean OR.
      example: tag1,tag2
      in: query
      name: tags
      schema:
        type: string
    PluginId:
      description: ID of the Plugin to lookup
      example: 3473c251-5b6c-4f45-b1ff-7ede735a366d
      in: path
      name: PluginId
      required: true
      schema:
        type: string
    RouteId:
      description: ID of the Route to lookup
      example: a4326a41-aa12-44e3-93e4-6b6e58bfb9d7
      in: path
      name: RouteId
      required: true
      schema:
        type: string
    SNIId:
      description: ID of the SNI to lookup
      example: 64c17a1a-b7d7-4a65-a5a4-42e4a7016e7f
      in: path
      name: SNIId
      required: true
      schema:
        type: string
    ServiceId:
      description: ID of the Service to lookup
      example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
      in: path
      name: ServiceId
      required: true
      schema:
        type: string
    UpstreamId:
      description: ID of the Upstream to lookup
      example: 426d620c-7058-4ae6-aacc-f85a3204a2c5
      in: path
      name: UpstreamId
      required: true
      schema:
        type: string
    VaultId:
      description: ID of the Vault to lookup
      example: 9d4d6d19-77c6-428e-a965-9bc9647633e9
      in: path
      name: VaultId
      required: true
      schema:
        type: string
  responses:
    HTTP401Error:
      content:
        application/json:
          examples:
            DuplicateApiKey:
              summary: Duplicate API key found
              value:
                message: Duplicate API key found
                status: 401
            InvalidAuthCred:
              summary: Invalid authentication credentials
              value:
                message: Unauthorized
                status: 401
            NoAPIKey:
              summary: No API key found
              value:
                message: No API key found in request
                status: 401
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
      description: Unauthorized
  schemas:
    ACL:
      allOf:
        - example:
            consumer:
              id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
            group: foo
            id: b1f34145-0343-41a4-9602-4c69dec2f269
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateACL'
    APIKey:
      allOf:
        - example:
            consumer:
              id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
            id: b2f34145-0343-41a4-9602-4c69dec2f269
            key: IL1deIyHyQA40WpeLeA1bIUXuvTwlGjo
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateAPIKey'
    BaseService:
      description: Service entities, as the name implies, are abstractions of each of your own upstream services. Examples of Services would be a data transformation microservice, a billing API, etc. The main attribute of a Service is its URL (where Kong should proxy traffic to), which can be set as a single string or by specifying its `protocol`, `host`, `port` and `path` individually. Services are associated to Routes (a Service can have many Routes associated with it). Routes are entry-points in Kong and define rules to match client requests. Once a Route is matched, Kong proxies the request to its associated Service. See the [Proxy Reference][proxy-reference] for a detailed explanation of how Kong proxies traffic.
      required:
        - protocol
        - host
        - port
      type: object
    BasicAuth:
      allOf:
        - example:
            consumer:
              id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
            id: b2f34145-0343-41a4-9602-4c69dec2f269
            password: hashedsoopersecretvalue
            username: darius
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateBasicAuth'
    CACertificate:
      allOf:
        - example:
            cert: |-
              -----BEGIN CERTIFICATE-----
              certificate-content
              -----END CERTIFICATE-----
            id: b2f34145-0343-41a4-9602-4c69dec2f260
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateCACertificate'
    Certificate:
      allOf:
        - example:
            cert: |-
              -----BEGIN CERTIFICATE-----
              certificate-content
              -----END CERTIFICATE-----
            id: b2f34145-0343-41a4-9602-4c69dec2f269
            key: |-
              -----BEGIN PRIVATE KEY-----
              private-key-content
              -----END PRIVATE KEY-----
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateCertificate'
    Consumer:
      allOf:
        - example:
            custom_id: "4200"
            id: 8a388226-80e8-4027-a486-25e4f7db5d21
            tags:
              - silver-tier
            username: bob-the-builder
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateConsumer'
    ConsumerGroup:
      allOf:
        - properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateConsumerGroup'
    CreateACL:
      allOf:
        - $ref: '#/components/schemas/CreateACLWithoutParents'
        - properties:
            consumer:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    CreateACLWithoutParents:
      properties:
        group:
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
    CreateAPIKey:
      allOf:
        - $ref: '#/components/schemas/CreateAPIKeyWithoutParents'
        - properties:
            consumer:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    CreateAPIKeyWithoutParents:
      properties:
        key:
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
    CreateBasicAuth:
      allOf:
        - $ref: '#/components/schemas/CreateBasicAuthWithoutParents'
        - properties:
            consumer:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    CreateBasicAuthWithoutParents:
      properties:
        password:
          type: string
        tags:
          items:
            type: string
          type: array
        username:
          type: string
      type: object
    CreateCACertificate:
      allOf:
        - $ref: '#/components/schemas/CreateCACertificateWithoutParents'
        - description: A CA certificate object represents a trusted CA. These objects are used by Kong to verify the validity of a client or server certificate.
          required:
            - cert
          type: object
    CreateCACertificateWithoutParents:
      properties:
        cert:
          description: PEM-encoded public certificate of the CA.
          type: string
        cert_digest:
          description: SHA256 hex digest of the public certificate. This field is read-only and it cannot be set by the caller, the value is automatically computed.
          type: string
        tags:
          description: An optional set of strings associated with the Certificate for grouping and filtering.
          items:
            type: string
          type: array
      type: object
    CreateCertificate:
      allOf:
        - $ref: '#/components/schemas/CreateCertificateWithoutParents'
        - description: 'A certificate object represents a public certificate, and can be optionally paired with the corresponding private key. These objects are used by Kong to handle SSL/TLS termination for encrypted requests, or for use as a trusted CA store when validating peer certificate of client/service. Certificates are optionally associated with SNI objects to tie a cert/key pair to one or more hostnames. If intermediate certificates are required in addition to the main certificate, they should be concatenated together into one string according to the following order: main certificate on the top, followed by any intermediates.'
          required:
            - cert
            - key
          type: object
    CreateCertificateWithoutParents:
      properties:
        cert:
          description: PEM-encoded public certificate chain of the SSL key pair. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          type: string
        cert_alt:
          description: PEM-encoded public certificate chain of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          type: string
        key:
          description: PEM-encoded private key of the SSL key pair. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          type: string
        key_alt:
          description: PEM-encoded private key of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          type: string
        tags:
          description: An optional set of strings associated with the Certificate for grouping and filtering.
          items:
            type: string
          type: array
      type: object
    CreateConsumer:
      allOf:
        - $ref: '#/components/schemas/CreateConsumerWithoutParents'
        - description: The Consumer object represents a consumer - or a user - of a Service. You can either rely on Kong as the primary datastore, or you can map the consumer list with your database to keep consistency between Kong and your existing primary datastore.
          type: object
    CreateConsumerGroup:
      allOf:
        - $ref: '#/components/schemas/CreateConsumerGroupWithoutParents'
        - required:
            - name
          type: object
    CreateConsumerGroupWithoutParents:
      properties:
        name:
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
    CreateConsumerWithoutParents:
      properties:
        custom_id:
          description: Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.
          type: string
        tags:
          description: An optional set of strings associated with the Consumer for grouping and filtering.
          items:
            type: string
          type: array
        username:
          description: The unique username of the Consumer. You must send either this field or `custom_id` with the request.
          type: string
      type: object
    CreateHMACAuth:
      allOf:
        - $ref: '#/components/schemas/CreateHMACAuthWithoutParents'
        - properties:
            consumer:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    CreateHMACAuthWithoutParents:
      properties:
        secret:
          type: string
        tags:
          items:
            type: string
          type: array
        username:
          type: string
      type: object
    CreateJWT:
      allOf:
        - $ref: '#/components/schemas/CreateJWTWithoutParents'
        - properties:
            consumer:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    CreateJWTWithoutParents:
      properties:
        algorithm:
          default: HS256
          enum:
            - HS256
            - HS384
            - HS512
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
          type: string
        key:
          type: string
        rsa_public_key:
          type: string
        secret:
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
    CreateKey:
      allOf:
        - $ref: '#/components/schemas/CreateKeyWithoutParents'
        - description: A Key object holds a representation of asymmetric keys in various formats. When Kong or a Kong plugin requires a specific public or private key to perform certain operations, it can use this entity.
          required:
            - kid
          type: object
    CreateKeySet:
      allOf:
        - $ref: '#/components/schemas/CreateKeySetWithoutParents'
        - type: object
    CreateKeySetWithoutParents:
      properties:
        name:
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
    CreateKeyWithoutParents:
      properties:
        jwk:
          description: A JSON Web Key represented as a string.
          type: string
        kid:
          description: A unique identifier for a key.
          type: string
        name:
          description: The name to associate with the given keys.
          type: string
        pem:
          description: A keypair in PEM format.
          properties:
            private_key:
              type: string
            public_key:
              type: string
          type: object
        set:
          additionalProperties: false
          description: The id (an UUID) of the key-set with which to associate the key.
          properties:
            id:
              type: string
          type: object
          x-foreign: true
        tags:
          description: An optional set of strings associated with the Key for grouping and filtering.
          items:
            type: string
          type: array
      type: object
    CreatePlugin:
      allOf:
        - $ref: '#/components/schemas/CreatePluginWithoutParents'
        - description: A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
          properties:
            consumer:
              additionalProperties: false
              description: If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
            route:
              additionalProperties: false
              description: If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
            service:
              additionalProperties: false
              description: If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          required:
            - name
            - config
          type: object
    CreatePluginWithoutParents:
      properties:
        config:
          description: The configuration properties for the Plugin which can be found on the plugins documentation page in the [Kong Hub](https://docs.konghq.com/hub/).
          type: object
        enabled:
          default: true
          description: Whether the plugin is applied.
          type: boolean
        name:
          description: The name of the Plugin that's going to be added. Currently, the Plugin must be installed in every Kong instance separately.
          type: string
        ordering:
          additionalProperties: true
          type: object
        protocols:
          default:
            - grpc
            - grpcs
            - http
            - https
          description: A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
          items:
            enum:
              - grpc
              - grpcs
              - http
              - https
              - tcp
              - tls
              - tls_passthrough
              - udp
              - ws
              - wss
            type: string
          type: array
        tags:
          description: An optional set of strings associated with the Plugin for grouping and filtering.
          items:
            type: string
          type: array
      type: object
    CreateRoute:
      allOf:
        - $ref: '#/components/schemas/CreateRouteWithoutParents'
        - description: Route entities define rules to match client requests. Each Route is associated with a Service, and a Service may have multiple Routes associated to it. Every request matching a given Route will be proxied to its associated Service. The combination of Routes and Services (and the separation of concerns between them) offers a powerful routing mechanism with which it is possible to define fine-grained entry-points in Kong leading to different upstream services of your infrastructure. You need at least one matching rule that applies to the protocol being matched by the Route.
          properties:
            service:
              additionalProperties: false
              description: The Service this Route is associated to. This is where the Route proxies traffic to.
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    CreateRouteWithoutParents:
      properties:
        destinations:
          description: A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
          items:
            properties:
              ip:
                type: string
              port:
                type: integer
            type: object
          type: array
        headers:
          additionalProperties: true
          description: 'One or more lists of values indexed by header name that will cause this Route to match if present in the request. The `Host` header cannot be used with this attribute: hosts should be specified using the `hosts` attribute. When `headers` contains only one value and that value starts with the special prefix `~*`, the value is interpreted as a regular expression.'
          type: object
        hosts:
          description: A list of domain names that match this Route. Note that the hosts value is case sensitive.
          items:
            type: string
          type: array
        https_redirect_status_code:
          default: 426
          description: 'The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the Route is configured to only accept the `https` protocol.'
          enum:
            - 426
            - 301
            - 302
            - 307
            - 308
          type: integer
        methods:
          description: A list of HTTP methods that match this Route.
          type: array
        name:
          description: The name of the Route. Route names must be unique, and they are case sensitive. For example, there can be two different Routes named "test" and "Test".
          type: string
        path_handling:
          default: v0
          description: Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior.
          enum:
            - v0
            - v1
          type: string
        paths:
          description: A list of paths that match this Route.
          items:
            type: string
          type: array
        preserve_host:
          default: false
          description: When matching a Route via one of the `hosts` domain names, use the request `Host` header in the upstream request headers. If set to `false`, the upstream `Host` header will be that of the Service's `host`.
          type: boolean
        protocols:
          default:
            - http
            - https
          description: An array of the protocols this Route should allow. See the [Route Object](#route-object) section for a list of accepted protocols. When set to only `"https"`, HTTP requests are answered with an upgrade error. When set to only `"http"`, HTTPS requests are answered with an error.
          items:
            enum:
              - grpc
              - grpcs
              - http
              - https
              - tcp
              - tls
              - tls_passthrough
              - udp
              - ws
              - wss
            type: string
          type: array
        regex_priority:
          default: 0
          description: A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same `regex_priority`, the older one (lowest `created_at`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones).
          type: integer
        request_buffering:
          default: true
          description: Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding.
          type: boolean
        response_buffering:
          default: true
          description: Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding.
          type: boolean
        snis:
          description: A list of SNIs that match this Route when using stream routing.
          type: array
        sources:
          description: A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
          items:
            properties:
              ip:
                type: string
              port:
                type: integer
            type: object
          type: array
        strip_path:
          default: true
          description: When matching a Route via one of the `paths`, strip the matching prefix from the upstream request URL.
          type: boolean
        tags:
          description: An optional set of strings associated with the Route for grouping and filtering.
          items:
            type: string
          type: array
      type: object
    CreateSNI:
      allOf:
        - $ref: '#/components/schemas/CreateSNIWithoutParents'
        - description: An SNI object represents a many-to-one mapping of hostnames to a certificate. That is, a certificate object can have many hostnames associated with it; when Kong receives an SSL request, it uses the SNI field in the Client Hello to lookup the certificate object based on the SNI associated with the certificate.
          properties:
            certificate:
              additionalProperties: false
              description: The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          required:
            - name
            - certificate
          type: object
    CreateSNIWithoutParents:
      properties:
        name:
          description: The SNI name to associate with the given certificate.
          type: string
        tags:
          description: An optional set of strings associated with the SNIs for grouping and filtering.
          items:
            type: string
          type: array
      type: object
    CreateService:
      allOf:
        - properties:
            url:
              description: Helper field to set `protocol`, `host`, `port` and `path` using a URL. This field is write-only and is not returned in responses.
              type: string
          type: object
        - $ref: '#/components/schemas/CreateServiceWithoutParents'
    CreateServiceWithoutParents:
      properties:
        ca_certificates:
          description: Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
          items:
            type: string
          type: array
        client_certificate:
          additionalProperties: false
          description: Certificate to be used as client certificate while TLS handshaking to the upstream server.
          properties:
            id:
              type: string
          type: object
          x-foreign: true
        connect_timeout:
          default: 60000
          description: The timeout in milliseconds for establishing a connection to the upstream server.
          type: integer
        enabled:
          default: true
          description: 'Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.'
          type: boolean
        host:
          description: The host of the upstream server. Note that the host value is case sensitive.
          type: string
        name:
          description: The Service name.
          type: string
        path:
          description: The path to be used in requests to the upstream server.
          type: string
        port:
          default: 80
          description: The upstream server port.
          type: integer
        protocol:
          default: http
          description: The protocol used to communicate with the upstream.
          enum:
            - grpc
            - grpcs
            - http
            - https
            - tcp
            - tls
            - tls_passthrough
            - udp
            - ws
            - wss
          type: string
        read_timeout:
          default: 60000
          description: The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
          type: integer
        retries:
          default: 5
          description: The number of retries to execute upon failure to proxy.
          type: integer
        tags:
          description: An optional set of strings associated with the Service for grouping and filtering.
          items:
            type: string
          type: array
        tls_verify:
          description: Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
          type: boolean
        tls_verify_depth:
          description: Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
          type: integer
        write_timeout:
          default: 60000
          description: The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
          type: integer
      type: object
    CreateTarget:
      allOf:
        - $ref: '#/components/schemas/CreateTargetWithoutParents'
        - description: A target is an ip address/hostname with a port that identifies an instance of a backend service. Every upstream can have many targets, and the targets can be dynamically added, modified, or deleted. Changes take effect on the fly. To disable a target, post a new one with `weight=0`; alternatively, use the `DELETE` convenience method to accomplish the same. The current target object definition is the one with the latest `created_at`.
          properties:
            upstream:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    CreateTargetWithoutParents:
      properties:
        tags:
          description: An optional set of strings associated with the Target for grouping and filtering.
          items:
            type: string
          type: array
        target:
          description: The target address (ip or hostname) and port. If the hostname resolves to an SRV record, the `port` value will be overridden by the value from the DNS record.
          type: string
        weight:
          default: 100
          description: The weight this target gets within the upstream loadbalancer (`0`-`65535`). If the hostname resolves to an SRV record, the `weight` value will be overridden by the value from the DNS record.
          type: integer
      type: object
    CreateUpstream:
      allOf:
        - $ref: '#/components/schemas/CreateUpstreamWithoutParents'
        - description: The upstream object represents a virtual hostname and can be used to loadbalance incoming requests over multiple services (targets). So for example an upstream named `service.v1.xyz` for a Service object whose `host` is `service.v1.xyz`. Requests for this Service would be proxied to the targets defined within the upstream. An upstream also includes a [health checker][healthchecks], which is able to enable and disable targets based on their ability or inability to serve requests. The configuration for the health checker is stored in the upstream object, and applies to all of its targets.
          required:
            - name
          type: object
    CreateUpstreamWithoutParents:
      properties:
        algorithm:
          default: round-robin
          description: Which load balancing algorithm to use.
          enum:
            - consistent-hashing
            - least-connections
            - round-robin
          type: string
        client_certificate:
          additionalProperties: false
          description: If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.
          properties:
            id:
              type: string
          type: object
          x-foreign: true
        hash_fallback:
          default: none
          description: What to use as hashing input if the primary `hash_on` does not return a hash (eg. header is missing, or no Consumer identified). Not available if `hash_on` is set to `cookie`.
          enum:
            - none
            - consumer
            - ip
            - header
            - cookie
            - path
            - query_arg
            - uri_capture
          type: string
        hash_fallback_header:
          description: The header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`.
          type: string
        hash_fallback_query_arg:
          description: The name of the query string argument to take the value from as hash input. Only required when `hash_fallback` is set to `query_arg`.
          type: string
        hash_fallback_uri_capture:
          description: The name of the route URI capture to take the value from as hash input. Only required when `hash_fallback` is set to `uri_capture`.
          type: string
        hash_on:
          default: none
          description: What to use as hashing input. Using `none` results in a weighted-round-robin scheme with no hashing.
          enum:
            - none
            - consumer
            - ip
            - header
            - cookie
            - path
            - query_arg
            - uri_capture
          type: string
        hash_on_cookie:
          description: The cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.
          type: string
        hash_on_cookie_path:
          default: /
          description: The cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`.
          type: string
        hash_on_header:
          description: The header name to take the value from as hash input. Only required when `hash_on` is set to `header`.
          type: string
        hash_on_query_arg:
          description: The name of the query string argument to take the value from as hash input. Only required when `hash_on` is set to `query_arg`.
          type: string
        hash_on_uri_capture:
          description: The name of the route URI capture to take the value from as hash input. Only required when `hash_on` is set to `uri_capture`.
          type: string
        healthchecks:
          properties:
            active:
              properties:
                concurrency:
                  default: 10
                  type: integer
                headers:
                  additionalProperties: true
                  type: object
                healthy:
                  properties:
                    http_statuses:
                      default:
                        - 200
                        - 302
                      items:
                        type: integer
                      type: array
                    interval:
                      default: 0
                      type: number
                    successes:
                      default: 0
                      type: integer
                  type: object
                http_path:
                  default: /
                  type: string
                https_sni:
                  type: string
                https_verify_certificate:
                  default: true
                  type: boolean
                timeout:
                  default: 1
                  type: number
                type:
                  default: http
                  enum:
                    - tcp
                    - http
                    - https
                    - grpc
                    - grpcs
                  type: string
                unhealthy:
                  properties:
                    http_failures:
                      default: 0
                      type: integer
                    http_statuses:
                      default:
                        - 429
                        - 404
                        - 500
                        - 501
                        - 502
                        - 503
                        - 504
                        - 505
                      items:
                        type: integer
                      type: array
                    interval:
                      default: 0
                      type: number
                    tcp_failures:
                      default: 0
                      type: integer
                    timeouts:
                      default: 0
                      type: integer
                  type: object
              type: object
            passive:
              properties:
                healthy:
                  properties:
                    http_statuses:
                      default:
                        - 200
                        - 201
                        - 202
                        - 203
                        - 204
                        - 205
                        - 206
                        - 207
                        - 208
                        - 226
                        - 300
                        - 301
                        - 302
                        - 303
                        - 304
                        - 305
                        - 306
                        - 307
                        - 308
                      items:
                        type: integer
                      type: array
                    successes:
                      default: 0
                      type: integer
                  type: object
                type:
                  default: http
                  enum:
                    - tcp
                    - http
                    - https
                    - grpc
                    - grpcs
                  type: string
                unhealthy:
                  properties:
                    http_failures:
                      default: 0
                      type: integer
                    http_statuses:
                      default:
                        - 429
                        - 500
                        - 503
                      items:
                        type: integer
                      type: array
                    tcp_failures:
                      default: 0
                      type: integer
                    timeouts:
                      default: 0
                      type: integer
                  type: object
              type: object
            threshold:
              default: 0
              type: number
          type: object
        host_header:
          description: The hostname to be used as `Host` header when proxying requests through Kong.
          type: string
        name:
          description: This is a hostname, which must be equal to the `host` of a Service.
          type: string
        slots:
          default: 10000
          description: The number of slots in the load balancer algorithm. If `algorithm` is set to `round-robin`, this setting determines the maximum number of slots. If `algorithm` is set to `consistent-hashing`, this setting determines the actual number of slots in the algorithm. Accepts an integer in the range `10`-`65536`.
          type: integer
        tags:
          description: An optional set of strings associated with the Upstream for grouping and filtering.
          items:
            type: string
          type: array
        use_srv_name:
          default: false
          description: If set, the balancer will use SRV hostname(if DNS Answer has SRV record) as the proxy upstream `Host`.
          type: boolean
      type: object
    CreateVault:
      allOf:
        - $ref: '#/components/schemas/CreateVaultWithoutParents'
        - description: Vault entities are used to configure different Vault connectors. Examples of Vaults are Environment Variables, Hashicorp Vault and AWS Secrets Manager. Configuring a Vault allows referencing the secrets with other entities. For example a certificate entity can store a reference to a certificate and key, stored in a vault, instead of storing the certificate and key within the entity. This allows a proper separation of secrets and configuration and prevents secret sprawl.
          type: object
    CreateVaultWithoutParents:
      properties:
        config:
          description: The configuration properties for the Vault which can be found on the vaults' documentation page.
          type: object
        description:
          description: The description of the Vault entity.
          type: string
        name:
          description: The name of the Vault that's going to be added. Currently, the Vault implementation must be installed in every Kong instance.
          type: string
        prefix:
          description: The unique prefix (or identifier) for this Vault configuration. The prefix is used to load the right Vault configuration and implementation when referencing secrets with the other entities.
          type: string
        tags:
          description: An optional set of strings associated with the Vault for grouping and filtering.
          items:
            type: string
          type: array
      type: object
    HMACAuth:
      allOf:
        - example:
            consumer:
              id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
            id: 75695322-e8a0-4109-aed4-5416b0308d85
            secret: wQazJ304DW5huJklHgUfjfiSyCyTAEDZ
            username: xerxes
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateHMACAuth'
    JWT:
      allOf:
        - example:
            algorithm: HS256
            consumer:
              id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
            id: 75695322-e8a0-4109-aed4-5416b0308d85
            key: YJdmaDvVTJxtcWRCvkMikc8oELgAVNcz
            secret: C50k0bcahDhLNhLKSUBSR1OMiFGzNZ7X
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateJWT'
    Key:
      allOf:
        - example:
            id: d958f66b-8e99-44d2-b0b4-edd5bbf24658
            jwk: '{"alg":"RSA",  "kid": "42",  ...}'
            kid: "42"
            name: a-key
            pem:
              private_key: '-----BEGIN'
              public_key: '-----BEGIN'
            set:
              id: b86b331c-dcd0-4b3e-97ce-47c5a9543031
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
            updated_at:
              description: Unix epoch when the resource was last updated.
              type: integer
          type: object
        - $ref: '#/components/schemas/CreateKey'
    KeySet:
      allOf:
        - example:
            id: b58c7d9d-e54f-444c-b24d-cdfc4159f61e
            name: example-key-set
            tags:
              - idp-keys
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
            updated_at:
              description: Unix epoch when the resource was last updated.
              type: integer
          type: object
        - $ref: '#/components/schemas/CreateKeySet'
    PaginationOffsetResponse:
      description: Offset is used to paginate through the API. Provide this value to the next list operation to fetch the next page
      type: string
    Plugin:
      allOf:
        - example:
            config:
              anonymous: null
              hide_credentials: false
              key_in_body: false
              key_in_header: true
              key_in_query: true
              key_names:
                - apikey
              run_on_preflight: true
            enabled: true
            id: 3fd1eea1-885a-4011-b986-289943ff8177
            name: key-auth
            protocols:
              - grpc
              - grpcs
              - http
              - https
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          required:
            - enabled
            - protocols
          type: object
        - $ref: '#/components/schemas/CreatePlugin'
    Route:
      allOf:
        - example:
            hosts:
              - foo.example.com
              - foo.example.us
            id: 56c4566c-14cc-4132-9011-4139fcbbe50a
            name: example-route
            paths:
              - /v1
              - /v2
            service:
              id: bd380f99-659d-415e-b0e7-72ea05df3218
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
            updated_at:
              description: Unix epoch when the resource was last updated.
              type: integer
          type: object
        - $ref: '#/components/schemas/CreateRoute'
    SNI:
      allOf:
        - example:
            certificate:
              id: bd380f99-659d-415e-b0e7-72ea05df3218
            id: 36c4566c-14cc-4132-9011-4139fcbbe50a
            name: some.example.org
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateSNI'
    Service:
      allOf:
        - example:
            host: example.internal
            id: 49fd316e-c457-481c-9fc7-8079153e4f3c
            name: example-service
            path: /
            port: 80
            protocol: http
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
            updated_at:
              description: Unix epoch when the resource was last updated.
              type: integer
          required:
            - connect_timeout
            - created_at
            - enabled
            - host
            - id
            - name
            - path
            - port
            - protocol
            - read_timeout
            - retries
            - updated_at
            - write_timeout
          type: object
        - $ref: '#/components/schemas/BaseService'
    Target:
      allOf:
        - example:
            id: 089292a7-ba3d-4d88-acf0-97b4b2e2621a
            target: 203.0.113.42
            upstream:
              id: 5f1d7e76-2fed-4806-a6af-869984f025cb
            weight: 100
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: number
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateTarget'
    UnauthorizedError:
      properties:
        message:
          type: string
        status:
          type: integer
      required:
        - message
        - status
      type: object
    Upstream:
      allOf:
        - example:
            algorithm: round-robin
            hash_fallback: none
            hash_on: none
            hash_on_cookie_path: /
            healthchecks:
              active:
                concurrency: 10
                healthy:
                  http_statuses:
                    - 200
                    - 302
                  interval: 0
                  successes: 0
                http_path: /
                https_verify_certificate: true
                timeout: 1
                type: http
                unhealthy:
                  http_failures: 0
                  http_statuses:
                    - 429
                    - 404
                    - 500
                    - 501
                    - 502
                    - 503
                    - 504
                    - 505
                  interval: 0
                  tcp_failures: 0
                  timeouts: 0
              passive:
                healthy:
                  http_statuses:
                    - 200
                    - 201
                    - 202
                    - 203
                    - 204
                    - 205
                    - 206
                    - 207
                    - 208
                    - 226
                    - 300
                    - 301
                    - 302
                    - 303
                    - 304
                    - 305
                    - 306
                    - 307
                    - 308
                  successes: 0
                type: http
                unhealthy:
                  http_failures: 0
                  http_statuses:
                    - 429
                    - 500
                    - 503
                  tcp_failures: 0
                  timeouts: 0
              threshold: 0
            id: 6eed5e9c-5398-4026-9a4c-d48f18a2431e
            name: api.example.internal
            slots: 10000
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
          type: object
        - $ref: '#/components/schemas/CreateUpstream'
    Vault:
      allOf:
        - example:
            config:
              prefix: ENV_PREFIX
            description: environment variable based vault
            id: 2747d1e5-8246-4f65-a939-b392f1ee17f8
            name: env
            tags:
              - foo
              - bar
          properties:
            created_at:
              description: Unix epoch when the resource was created.
              type: integer
            id:
              type: string
            updated_at:
              description: Unix epoch when the resource was last updated.
              type: integer
          type: object
        - $ref: '#/components/schemas/CreateVault'
  securitySchemes:
    konnectAccessToken:
      description: The Konnect access token is meant to be used by the Konnect dashboard and the decK CLI to authenticate with.
      scheme: bearer
      type: http
    personalAccessToken:
      description: The personal access token is meant to be used as an alternative to basic-auth when accessing Konnect via APIs. You can generate a Personal Access Token (PAT) from the personal access token page in the Konnect dashboard.
      scheme: bearer
      type: http
externalDocs:
  description: Documentation for Kong Gateway and its APIs
  url: https://docs.konghq.com
info:
  contact:
    email: support@konghq.com
    name: Kong Inc
    url: https://konghq.com
  description: |-
    OpenAPI 3.0 spec for Kong Gateway's Admin API.

    You can lean more about Kong Gateway at [docs.konghq.com](https://docs.konghq.com)
    .Give Kong a star at [Kong/kong](https://github.com/kong/kong) repository.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Konnect Control Planes Configuration
  version: 0.0.1
openapi: 3.0.0
paths:
  /control-planes/{controlPlaneId}/core-entities/acls:
    get:
      description: List all ACLs
      operationId: list-acl
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/ACL'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing ACLs
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: List all ACLs
      tags:
        - ACLs
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new ACL
      operationId: create-acl
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateACL'
        description: Description of the new ACL for creation
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACL'
          description: Successfully created ACL
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid ACL
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new ACL
      tags:
        - ACLs
  /control-planes/{controlPlaneId}/core-entities/acls/{ACLId}:
    delete:
      description: Delete an ACL
      operationId: delete-acl
      parameters:
        - $ref: '#/components/parameters/ACLId'
      responses:
        "204":
          description: Successfully deleted ACL or the resource didn't exist
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete an ACL
      tags:
        - ACLs
    get:
      description: Get an ACL using ID.
      operationId: get-acl
      parameters:
        - $ref: '#/components/parameters/ACLId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACL'
          description: Successfully fetched ACL
        "401":
          $ref: '#/components/responses/HTTP401Error'
        "404":
          description: Resource does not exist
      summary: Fetch an ACL
      tags:
        - ACLs
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update ACL using ID.
      operationId: upsert-acl
      parameters:
        - $ref: '#/components/parameters/ACLId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateACL'
        description: Description of the ACL
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACL'
          description: Successfully upserted ACL
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid ACL
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a ACL
      tags:
        - ACLs
  /control-planes/{controlPlaneId}/core-entities/basic-auths:
    get:
      description: List all Basic-auth credentials
      operationId: list-basic-auth
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/BasicAuth'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing Basic-auth credentials
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Basic-auth credentials
      tags:
        - Basic-auth credentials
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Basic-auth credential
      operationId: create-basic-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBasicAuth'
        description: Description of the new Basic-auth credential for creation
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuth'
          description: Successfully created Basic-auth credential
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Basic-auth credential
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Basic-auth credential
      tags:
        - Basic-auth credentials
  /control-planes/{controlPlaneId}/core-entities/basic-auths/{BasicAuthId}:
    delete:
      description: Delete a Basic-auth credential
      operationId: delete-basic-auth
      parameters:
        - $ref: '#/components/parameters/BasicAuthId'
      responses:
        "204":
          description: Successfully deleted Basic-auth credential or the resource didn't exist
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Basic-auth credential
      tags:
        - Basic-auth credentials
    get:
      description: Get a Basic-auth credential using ID.
      operationId: get-basic-auth
      parameters:
        - $ref: '#/components/parameters/BasicAuthId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuth'
          description: Successfully fetched Basic-auth credential
        "401":
          $ref: '#/components/responses/HTTP401Error'
        "404":
          description: Resource does not exist
      summary: Fetch a Basic-auth credential
      tags:
        - Basic-auth credentials
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Basic-auth credential using ID.
      operationId: upsert-basic-auth
      parameters:
        - $ref: '#/components/parameters/BasicAuthId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBasicAuth'
        description: Description of the Basic-auth credential
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuth'
          description: Successfully upserted Basic-auth credential
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Basic-auth credential
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Basic-auth credential
      tags:
        - Basic-auth credentials
  /control-planes/{controlPlaneId}/core-entities/ca_certificates:
    get:
      description: List all CA Certificates
      operationId: list-ca_certificate
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/CACertificate'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing CA Certificates
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: List all CA Certificates
      tags:
        - CA Certificates
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new CA Certificate
      operationId: create-ca_certificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCACertificate'
        description: Description of the new CA Certificate for creation
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACertificate'
          description: Successfully created CA Certificate
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid CA Certificate
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new CA Certificate
      tags:
        - CA Certificates
  /control-planes/{controlPlaneId}/core-entities/ca_certificates/{CACertificateId}:
    delete:
      description: Delete a CA Certificate
      operationId: delete-ca_certificate
      parameters:
        - $ref: '#/components/parameters/CACertificateId'
      responses:
        "204":
          description: Successfully deleted CA Certificate or the resource didn't exist
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a CA Certificate
      tags:
        - CA Certificates
    get:
      description: Get a CA Certificate using ID.
      operationId: get-ca_certificate
      parameters:
        - $ref: '#/components/parameters/CACertificateId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACertificate'
          description: Successfully fetched CA Certificate
        "401":
          $ref: '#/components/responses/HTTP401Error'
        "404":
          description: Resource does not exist
      summary: Fetch a CA Certificate
      tags:
        - CA Certificates
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update CA Certificate using ID.
      operationId: upsert-ca_certificate
      parameters:
        - $ref: '#/components/parameters/CACertificateId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCACertificate'
        description: Description of the CA Certificate
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACertificate'
          description: Successfully upserted CA Certificate
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid CA Certificate
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a CA Certificate
      tags:
        - CA Certificates
  /control-planes/{controlPlaneId}/core-entities/certificates:
    get:
      description: List all Certificates
      operationId: list-certificate
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Certificate'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing Certificates
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Certificates
      tags:
        - Certificates
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Certificate
      operationId: create-certificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCertificate'
        description: Description of the new Certificate for creation
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successfully created Certificate
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Certificate
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Certificate
      tags:
        - Certificates
  /control-planes/{controlPlaneId}/core-entities/certificates/{CertificateId}:
    delete:
      description: Delete a Certificate
      operationId: delete-certificate
      parameters:
        - $ref: '#/components/parameters/CertificateId'
      responses:
        "204":
          description: Successfully deleted Certificate or the resource didn't exist
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Certificate
      tags:
        - Certificates
    get:
      description: Get a Certificate using ID.
      operationId: get-certificate
      parameters:
        - $ref: '#/components/parameters/CertificateId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successfully fetched Certificate
        "401":
          $ref: '#/components/responses/HTTP401Error'
        "404":
          description: Resource does not exist
      summary: Fetch a Certificate
      tags:
        - Certificates
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Certificate using ID.
      operationId: upsert-certificate
      parameters:
        - $ref: '#/components/parameters/CertificateId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCertificate'
        description: Description of the Certificate
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successfully upserted Certificate
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Certificate
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Certificate
      tags:
        - Certificates
  /control-planes/{controlPlaneId}/core-entities/consumer_groups:
    get:
      description: List all Consumer Groups
      operationId: list-consumer_group
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/ConsumerGroup'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing Consumer Groups
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Consumer Groups
      tags:
        - Consumer Groups
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Consumer Group
      operationId: create-consumer_group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsumerGroup'
        description: Description of the new Consumer Group for creation
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroup'
          description: Successfully created Consumer Group
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Consumer Group
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Consumer Group
      tags:
        - Consumer Groups
  /control-planes/{controlPlaneId}/core-entities/consumer_groups/{ConsumerGroupId}:
    delete:
      description: Delete a Consumer Group
      operationId: delete-consumer_group
      parameters:
        - $ref: '#/components/parameters/ConsumerGroupId'
      responses:
        "204":
          description: Successfully deleted Consumer Group or the resource didn't exist
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Consumer Group
      tags:
        - Consumer Groups
    get:
      description: Get a Consumer Group using ID.
      operationId: get-consumer_group
      parameters:
        - $ref: '#/components/parameters/ConsumerGroupId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroup'
          description: Successfully fetched Consumer Group
        "401":
          $ref: '#/components/responses/HTTP401Error'
        "404":
          description: Resource does not exist
      summary: Fetch a Consumer Group
      tags:
        - Consumer Groups
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Consumer Group using ID.
      operationId: upsert-consumer_group
      parameters:
        - $ref: '#/components/parameters/ConsumerGroupId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsumerGroup'
        description: Description of the Consumer Group
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroup'
          description: Successfully upserted Consumer Group
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Consumer Group
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Consumer Group
      tags:
        - Consumer Groups
  /control-planes/{controlPlaneId}/core-entities/consumers:
    get:
      description: List all Consumers
      operationId: list-consumer
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Consumer'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing Consumers
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Consumers
      tags:
        - Consumers
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Consumer
      operationId: create-consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsumer'
        description: Description of the new Consumer for creation
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
          description: Successfully created Consumer
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Consumer
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Consumer
      tags:
        - Consumers
  /control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerId}:
    delete:
      description: Delete a Consumer
      operationId: delete-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
      responses:
        "204":
          description: Successfully deleted Consumer or the resource didn't exist
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Consumer
      tags:
        - Consumers
    get:
      description: Get a Consumer using ID or username.
      operationId: get-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
          description: Successfully fetched Consumer
        "401":
          $ref: '#/components/responses/HTTP401Error'
        "404":
          description: Resource does not exist
      summary: Fetch a Consumer
      tags:
        - Consumers
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Consumer using ID or username.
      operationId: upsert-consumer
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsumer'
        description: Description of the Consumer
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
          description: Successfully upserted Consumer
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Consumer
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Consumer
      tags:
        - Consumers
  /control-planes/{controlPlaneId}/core-entities/hmac-auths:
    get:
      description: List all HMAC-auth credentials
      operationId: list-hmac-auth
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/HMACAuth'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing HMAC-auth credentials
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: List all HMAC-auth credentials
      tags:
        - HMAC-auth credentials
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new HMAC-auth credential
      operationId: create-hmac-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHMACAuth'
        description: Description of the new HMAC-auth credential for creation
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HMACAuth'
          description: Successfully created HMAC-auth credential
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid HMAC-auth credential
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new HMAC-auth credential
      tags:
        - HMAC-auth credentials
  /control-planes/{controlPlaneId}/core-entities/hmac-auths/{HMACAuthId}:
    delete:
      description: Delete a HMAC-auth credential
      operationId: delete-hmac-auth
      parameters:
        - $ref: '#/components/parameters/HMACAuthId'
      responses:
        "204":
          description: Successfully deleted HMAC-auth credential or the resource didn't exist
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a HMAC-auth credential
      tags:
        - HMAC-auth credentials
    get:
      description: Get a HMAC-auth credential using ID.
      operationId: get-hmac-auth
      parameters:
        - $ref: '#/components/parameters/HMACAuthId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HMACAuth'
          description: Successfully fetched HMAC-auth credential
        "401":
          $ref: '#/components/responses/HTTP401Error'
        "404":
          description: Resource does not exist
      summary: Fetch a HMAC-auth credential
      tags:
        - HMAC-auth credentials
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update HMAC-auth credential using ID.
      operationId: upsert-hmac-auth
      parameters:
        - $ref: '#/components/parameters/HMACAuthId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHMACAuth'
        description: Description of the HMAC-auth credential
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HMACAuth'
          description: Successfully upserted HMAC-auth credential
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid HMAC-auth credential
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a HMAC-auth credential
      tags:
        - HMAC-auth credentials
  /control-planes/{controlPlaneId}/core-entities/jwts:
    get:
      description: List all JWTs
      operationId: list-jwt
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/JWT'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing JWTs
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: List all JWTs
      tags:
        - JWTs
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new JWT
      operationId: create-jwt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJWT'
        description: Description of the new JWT for creation
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: Successfully created JWT
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid JWT
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new JWT
      tags:
        - JWTs
  /control-planes/{controlPlaneId}/core-entities/jwts/{JWTId}:
    delete:
      description: Delete a JWT
      operationId: delete-jwt
      parameters:
        - $ref: '#/components/parameters/JWTId'
      responses:
        "204":
          description: Successfully deleted JWT or the resource didn't exist
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a JWT
      tags:
        - JWTs
    get:
      description: Get a JWT using ID.
      operationId: get-jwt
      parameters:
        - $ref: '#/components/parameters/JWTId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: Successfully fetched JWT
        "401":
          $ref: '#/components/responses/HTTP401Error'
        "404":
          description: Resource does not exist
      summary: Fetch a JWT
      tags:
        - JWTs
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update JWT using ID.
      operationId: upsert-jwt
      parameters:
        - $ref: '#/components/parameters/JWTId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJWT'
        description: Description of the JWT
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: Successfully upserted JWT
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid JWT
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a JWT
      tags:
        - JWTs
  /control-planes/{controlPlaneId}/core-entities/key-auths:
    get:
      description: List all API-keys
      operationId: list-key-auth
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/APIKey'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing API-keys
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: List all API-keys
      tags:
        - API-keys
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new API-key
      operationId: create-key-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAPIKey'
        description: Description of the new API-key for creation
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
          description: Successfully created API-key
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid API-key
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new API-key
      tags:
        - API-keys
  /control-planes/{controlPlaneId}/core-entities/key-sets:
    get:
      description: List all KeySets
      operationId: list-key-set
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/KeySet'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing KeySets
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: List all KeySets
      tags:
        - KeySets
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new KeySet
      operationId: create-key-set
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKeySet'
        description: Description of the new KeySet for creation
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeySet'
          description: Successfully created KeySet
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid KeySet
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new KeySet
      tags:
        - KeySets
  /control-planes/{controlPlaneId}/core-entities/key-sets/{KeySetId}:
    delete:
      description: Delete a KeySet
      operationId: delete-key-set
      parameters:
        - $ref: '#/components/parameters/KeySetId'
      responses:
        "204":
          description: Successfully deleted KeySet or the resource didn't exist
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a KeySet
      tags:
        - KeySets
    get:
      description: Get a KeySet using ID or name.
      operationId: get-key-set
      parameters:
        - $ref: '#/components/parameters/KeySetId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeySet'
          description: Successfully fetched KeySet
        "401":
          $ref: '#/components/responses/HTTP401Error'
        "404":
          description: Resource does not exist
      summary: Fetch a KeySet
      tags:
        - KeySets
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update KeySet using ID or name.
      operationId: upsert-key-set
      parameters:
        - $ref: '#/components/parameters/KeySetId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKeySet'
        description: Description of the KeySet
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeySet'
          description: Successfully upserted KeySet
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid KeySet
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a KeySet
      tags:
        - KeySets
  /control-planes/{controlPlaneId}/core-entities/keys:
    get:
      description: List all Keys
      operationId: list-key
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Key'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing Keys
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Keys
      tags:
        - Keys
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Key
      operationId: create-key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKey'
        description: Description of the new Key for creation
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
          description: Successfully created Key
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Key
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Key
      tags:
        - Keys
  /control-planes/{controlPlaneId}/core-entities/keys/{KeyId}:
    delete:
      description: Delete a Key
      operationId: delete-key
      parameters:
        - $ref: '#/components/parameters/KeyId'
      responses:
        "204":
          description: Successfully deleted Key or the resource didn't exist
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Key
      tags:
        - Keys
    get:
      description: Get a Key using ID or name.
      operationId: get-key
      parameters:
        - $ref: '#/components/parameters/KeyId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
          description: Successfully fetched Key
        "401":
          $ref: '#/components/responses/HTTP401Error'
        "404":
          description: Resource does not exist
      summary: Fetch a Key
      tags:
        - Keys
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Key using ID or name.
      operationId: upsert-key
      parameters:
        - $ref: '#/components/parameters/KeyId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKey'
        description: Description of the Key
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
          description: Successfully upserted Key
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Key
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Key
      tags:
        - Keys
  /control-planes/{controlPlaneId}/core-entities/plugins:
    get:
      description: List all Plugins
      operationId: list-plugin
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Plugin'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing Plugins
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Plugins
      tags:
        - Plugins
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Plugin
      operationId: create-plugin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlugin'
        description: Description of the new Plugin for creation
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully created Plugin
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Plugin
      tags:
        - Plugins
  /control-planes/{controlPlaneId}/core-entities/plugins/{PluginId}:
    delete:
      description: Delete a Plugin
      operationId: delete-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        "204":
          description: Successfully deleted Plugin or the resource didn't exist
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Plugin
      tags:
        - Plugins
    get:
      description: Get a Plugin using ID.
      operationId: get-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully fetched Plugin
        "401":
          $ref: '#/components/responses/HTTP401Error'
        "404":
          description: Resource does not exist
      summary: Fetch a Plugin
      tags:
        - Plugins
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Plugin using ID.
      operationId: upsert-plugin
      parameters:
        - $ref: '#/components/parameters/PluginId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlugin'
        description: Description of the Plugin
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully upserted Plugin
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Plugin
      tags:
        - Plugins
  /control-planes/{controlPlaneId}/core-entities/routes:
    get:
      description: List all Routes
      operationId: list-route
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Route'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing Routes
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Routes
      tags:
        - Routes
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Route
      operationId: create-route
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoute'
        description: Description of the new Route for creation
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully created Route
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Route
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Route
      tags:
        - Routes
  /control-planes/{controlPlaneId}/core-entities/routes/{RouteId}:
    delete:
      description: Delete a Route
      operationId: delete-route
      parameters:
        - $ref: '#/components/parameters/RouteId'
      responses:
        "204":
          description: Successfully deleted Route or the resource didn't exist
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Route
      tags:
        - Routes
    get:
      description: Get a Route using ID or name.
      operationId: get-route
      parameters:
        - $ref: '#/components/parameters/RouteId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully fetched Route
        "401":
          $ref: '#/components/responses/HTTP401Error'
        "404":
          description: Resource does not exist
      summary: Fetch a Route
      tags:
        - Routes
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Route using ID or name.
      operationId: upsert-route
      parameters:
        - $ref: '#/components/parameters/RouteId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoute'
        description: Description of the Route
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully upserted Route
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Route
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Route
      tags:
        - Routes
  /control-planes/{controlPlaneId}/core-entities/services:
    get:
      description: List all Services
      operationId: list-service
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Service'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing Services
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Services
      tags:
        - Services
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Service
      operationId: create-service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateService'
        description: Description of the new Service for creation
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successfully created Service
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Service
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Service
      tags:
        - Services
  /control-planes/{controlPlaneId}/core-entities/services/{ServiceId}:
    delete:
      description: Delete a Service
      operationId: delete-service
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      responses:
        "204":
          description: Successfully deleted Service or the resource didn't exist
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Service
      tags:
        - Services
    get:
      description: Get a Service using ID or name.
      operationId: get-service
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successfully fetched Service
        "401":
          $ref: '#/components/responses/HTTP401Error'
        "404":
          description: Resource does not exist
      summary: Fetch a Service
      tags:
        - Services
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Service using ID or name.
      operationId: upsert-service
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateService'
        description: Description of the Service
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successfully upserted Service
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Service
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Service
      tags:
        - Services
  /control-planes/{controlPlaneId}/core-entities/snis:
    get:
      description: List all SNIs
      operationId: list-sni
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/SNI'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing SNIs
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: List all SNIs
      tags:
        - SNIs
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new SNI
      operationId: create-sni
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSNI'
        description: Description of the new SNI for creation
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully created SNI
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid SNI
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new SNI
      tags:
        - SNIs
  /control-planes/{controlPlaneId}/core-entities/snis/{SNIId}:
    delete:
      description: Delete an SNI
      operationId: delete-sni
      parameters:
        - $ref: '#/components/parameters/SNIId'
      responses:
        "204":
          description: Successfully deleted SNI or the resource didn't exist
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete an SNI
      tags:
        - SNIs
    get:
      description: Get an SNI using ID or name.
      operationId: get-sni
      parameters:
        - $ref: '#/components/parameters/SNIId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully fetched SNI
        "401":
          $ref: '#/components/responses/HTTP401Error'
        "404":
          description: Resource does not exist
      summary: Fetch an SNI
      tags:
        - SNIs
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update SNI using ID or name.
      operationId: upsert-sni
      parameters:
        - $ref: '#/components/parameters/SNIId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSNI'
        description: Description of the SNI
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully upserted SNI
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid SNI
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a SNI
      tags:
        - SNIs
  /control-planes/{controlPlaneId}/core-entities/upstreams:
    get:
      description: List all Upstreams
      operationId: list-upstream
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Upstream'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing Upstreams
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Upstreams
      tags:
        - Upstreams
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Upstream
      operationId: create-upstream
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpstream'
        description: Description of the new Upstream for creation
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upstream'
          description: Successfully created Upstream
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Upstream
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Upstream
      tags:
        - Upstreams
  /control-planes/{controlPlaneId}/core-entities/upstreams/{UpstreamId}:
    delete:
      description: Delete an Upstream
      operationId: delete-upstream
      parameters:
        - $ref: '#/components/parameters/UpstreamId'
      responses:
        "204":
          description: Successfully deleted Upstream or the resource didn't exist
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete an Upstream
      tags:
        - Upstreams
    get:
      description: Get an Upstream using ID or name.
      operationId: get-upstream
      parameters:
        - $ref: '#/components/parameters/UpstreamId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upstream'
          description: Successfully fetched Upstream
        "401":
          $ref: '#/components/responses/HTTP401Error'
        "404":
          description: Resource does not exist
      summary: Fetch an Upstream
      tags:
        - Upstreams
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Upstream using ID or name.
      operationId: upsert-upstream
      parameters:
        - $ref: '#/components/parameters/UpstreamId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpstream'
        description: Description of the Upstream
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upstream'
          description: Successfully upserted Upstream
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Upstream
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Upstream
      tags:
        - Upstreams
  /control-planes/{controlPlaneId}/core-entities/vaults:
    get:
      description: List all Vaults
      operationId: list-vault
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Vault'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
          description: A successful response listing Vaults
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: List all Vaults
      tags:
        - Vaults
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      description: Create a new Vault
      operationId: create-vault
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVault'
        description: Description of the new Vault for creation
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: Successfully created Vault
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Vault
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Create a new Vault
      tags:
        - Vaults
  /control-planes/{controlPlaneId}/core-entities/vaults/{VaultId}:
    delete:
      description: Delete a Vault
      operationId: delete-vault
      parameters:
        - $ref: '#/components/parameters/VaultId'
      responses:
        "204":
          description: Successfully deleted Vault or the resource didn't exist
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Delete a Vault
      tags:
        - Vaults
    get:
      description: Get a Vault using ID or prefix.
      operationId: get-vault
      parameters:
        - $ref: '#/components/parameters/VaultId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: Successfully fetched Vault
        "401":
          $ref: '#/components/responses/HTTP401Error'
        "404":
          description: Resource does not exist
      summary: Fetch a Vault
      tags:
        - Vaults
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    put:
      description: Create or Update Vault using ID or prefix.
      operationId: upsert-vault
      parameters:
        - $ref: '#/components/parameters/VaultId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVault'
        description: Description of the Vault
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: Successfully upserted Vault
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Vault
        "401":
          $ref: '#/components/responses/HTTP401Error'
      summary: Upsert a Vault
      tags:
        - Vaults
security:
  - konnectAccessToken: []
  - personalAccessToken: []
servers:
  - description: Default Admin API URL
    url: '{protocol}://{hostname}:{port}{path}'
    variables:
      hostname:
        default: localhost
        description: Hostname for Kong's Admin API
      path:
        default: /
        description: Base path for Kong's Admin API
      port:
        default: "8001"
        description: Port for Kong's Admin API
      protocol:
        default: http
        description: Protocol for requests to Kong's Admin API
        enum:
          - http
          - https
tags:
  - description: |
      Service entities are abstractions of your microservice interfaces or formal APIs. For example, a service could be a data transformation microservice or a billing API.
      <br><br>
      The main attribute of a service is the destination URL for proxying traffic. This URL can be set as a single string or by specifying its protocol, host, port and path individually.
      <br><br>
      Services are associated to routes, and a single service can have many routes associated with it. Routes are entrypoints in Kong Gateway which define rules to match client requests. Once a route is matched, Kong Gateway proxies the request to its associated service. See the [Proxy Reference](https://docs.konghq.com/gateway/latest/how-kong-works/routing-traffic/) for a detailed explanation of how Kong proxies traffic.
      <br><br>
      Services can be both [tagged and filtered by tags](https://docs.konghq.com/gateway/latest/admin-api/#tags).
    name: Services
  - description: |
      Route entities define rules to match client requests. Each route is associated with a service, and a service may have multiple routes associated to it. Every request matching a given route will be proxied to the associated service. You need at least one matching rule that applies to the protocol being matched by the route.
      <br><br>
      The combination of routes and services, and the separation of concerns between them, offers a powerful routing mechanism with which it is possible to define fine-grained entrypoints in Kong Gateway leading to different upstream services of your infrastructure.
      <br><br>
      Depending on the protocol, one of the following attributes must be set:
      <br>

      - `http`: At least one of `methods`, `hosts`, `headers`, or `paths`
      - `https`: At least one of `methods`, `hosts`, `headers`, `paths`, or `snis`
      - `tcp`: At least one of `sources` or `destinations`
      - `tls`: at least one of `sources`, `destinations`, or `snis`
      - `tls_passthrough`: set `snis`
      - `grpc`: At least one of `hosts`, `headers`, or `paths`
      - `grpcs`: At least one of `hosts`, `headers`, `paths`, or `snis`
      - `ws`: At least one of `hosts`, `headers`, or `paths`
      - `wss`: At least one of `hosts`, `headers`, `paths`, or `snis`
        <br>
        A route can't have both `tls` and `tls_passthrough` protocols at same time.
        <br><br>
        Learn more about the router:
      - [Configure routes using expressions](https://docs.konghq.com/gateway/latest/key-concepts/routes/expressions)
      - [Router Expressions language reference](https://docs.konghq.com/gateway/latest/reference/router-expressions-language/)
    name: Routes
  - description: |
      A plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. Plugins let you add functionality to services that run behind a Kong Gateway instance, like authentication or rate limiting.
      You can find more information about available plugins and which values each plugin accepts at the [Plugin Hub](https://docs.konghq.com/hub/).
      <br><br>
      When adding a plugin configuration to a service, the plugin will run on every request made by a client to that service. If a plugin needs to be tuned to different values for some specific consumers, you can do so by creating a separate plugin instance that specifies both the service and the consumer, through the service and consumer fields.
      <br><br>
      Plugins can be both [tagged and filtered by tags](https://docs.konghq.com/gateway/latest/admin-api/#tags).
    name: Plugins
  - description: |
      The consumer object represents a consumer - or a user - of a service.
      You can either rely on Kong Gateway as the primary datastore, or you can map the consumer list with your database to keep consistency between Kong Gateway and your existing primary datastore.
    name: Consumers
  - description: "Consumer groups enable the organization and categorization of consumers (users or applications) within an API ecosystem. \nBy grouping consumers together, you eliminate the need to manage them individually, providing a scalable, efficient approach to managing configurations."
    name: Consumer Groups
  - description: |
      A certificate object represents a public certificate, and can be optionally paired with the corresponding private key. These objects are used by Kong Gateway to handle SSL/TLS termination for encrypted requests, or for use as a trusted CA store when validating peer certificate of client/service.
      <br><br>
      Certificates are optionally associated with SNI objects to tie a cert/key pair to one or more hostnames.
      <br><br>
      If intermediate certificates are required in addition to the main certificate, they should be concatenated together into one string.
    name: Certificates
  - description: "An SNI object represents a many-to-one mapping of hostnames to a certificate. \n<br><br>\nA certificate object can have many hostnames associated with it. When Kong Gateway receives an SSL request, it uses the SNI field in the Client Hello to look up the certificate object based on the SNI associated with the certificate."
    name: SNIs
  - description: "A CA certificate object represents a trusted certificate authority. \nThese objects are used by Kong Gateway to verify the validity of a client or server certificate."
    name: CA Certificates
  - description: "The upstream object represents a virtual hostname and can be used to load balance incoming requests over multiple services (targets). \n<br><br>\nAn upstream also includes a [health checker](https://docs.konghq.com/gateway/latest/how-kong-works/health-checks/), which can enable and disable targets based on their ability or inability to serve requests. \nThe configuration for the health checker is stored in the upstream object, and applies to all of its targets."
    name: Upstreams
  - description: |
      Vault objects are used to configure different vault connectors for [managing secrets](https://docs.konghq.com/gateway/latest/kong-enterprise/secrets-management/).
      Configuring a vault lets you reference secrets from other entities.
      This allows for a proper separation of secrets and configuration and prevents secret sprawl.
      <br><br>
      For example, you could store a certificate and a key in a vault, then reference them from a certificate entity. This way, the certificate and key are not stored in the entity directly and are more secure.
      <br><br>
      Secrets rotation can be managed using [TTLs](https://docs.konghq.com/gateway/latest/kong-enterprise/secrets-management/advanced-usage/).
    name: Vaults
  - description: |
      A key object holds a representation of asymmetric keys in various formats. When Kong Gateway or a Kong plugin requires a specific public or private key to perform certain operations, it can use this entity.
    name: Keys
  - description: |
      A JSON Web key set. Key sets are the preferred way to expose keys to plugins because they tell the plugin where to look for keys or have a scoping mechanism to restrict plugins to specific keys.
    name: KeySets
  - name: API-keys
  - name: Basic-auth credentials
  - name: JWTs
  - name: HMAC-auth credentials
  - name: ACLs
